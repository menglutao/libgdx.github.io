<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="https://libgdx.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://libgdx.com/" rel="alternate" type="text/html" /><updated>2023-11-07T20:59:08+00:00</updated><id>https://libgdx.com/feed.xml</id><title type="html">libGDX</title><subtitle>libGDX is a cross-platform Java game development framework based on OpenGL (ES) that works on Windows, Linux, macOS, Android, your browser and iOS.</subtitle><entry><title type="html">libGDX 1.12.1</title><link href="https://libgdx.com/news/2023/11/gdx-1-12-1" rel="alternate" type="text/html" title="libGDX 1.12.1" /><published>2023-11-02T00:00:00+00:00</published><updated>2023-11-02T00:00:00+00:00</updated><id>https://libgdx.com/news/2023/11/gdx-1-12-1</id><content type="html" xml:base="https://libgdx.com/news/2023/11/gdx-1-12-1"><![CDATA[<p class="notice--primary no-top-margin">If you are looking for past changelogs, check out <a href="/news/changelog/">this</a> page.</p>

<p>libGDX 1.12.1 is a minor release containing plenty of small fixes and improvements. Check out the full list below to find out more.</p>

<h2 id="a-few-notable-changes">A few notable changes</h2>
<ul>
  <li>[ANDROID] Fix the Android X build error by changing the <code class="language-plaintext highlighter-rouge">androidx.fragment</code> dependency to <code class="language-plaintext highlighter-rouge">compileOnly</code>.</li>
  <li>[CORE] Add a <code class="language-plaintext highlighter-rouge">Vector4</code> class.</li>
  <li>[iOS] Updated to <a href="https://github.com/MobiVM/robovm/wiki/Changelog">MobiVM 2.3.20</a> from 2.3.19.</li>
  <li>[LWJGL3] Updated to <a href="https://github.com/LWJGL/lwjgl3/releases/tag/3.3.3">LWJGL 3.3.3</a> from 3.3.2.</li>
  <li>[LWJGL3] The audio device is automatically switched if it was changed in the operating system.</li>
  <li>[LWJGL3] Use STBVorbis to decode Ogg data for <code class="language-plaintext highlighter-rouge">Sound</code> to greatly improve its speed.</li>
  <li>[LWJGL3] We lowered the GLIBC requirements to 2.17 in order to reintroduce support for older Linux systems.</li>
  <li>[LWJGL3][ANGLE] Fix crash with ANGLE GLES renderer.</li>
</ul>

<p>To check out our progress towards the next release, take a look at the <a href="https://github.com/libgdx/libgdx/milestone/6">corresponding milestone</a> on GitHub. As always, we appreciate feedback on the issues/PRs already part of the milestone and would like to invite you to bring forward anything still missing on our <a href="/community/discord/">Discord</a> server!</p>

<h3 id="full-changelog">Full changelog</h3>
<p class="notice--info">Updating your Gradle project is straight-forward: Check out the instructions <a href="/wiki/articles/updating-libgdx">on the wiki</a>! The latest version of dependencies can, as always, be found <a href="/dev/versions/">here</a>.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- LWJGL3 Improvement: Audio device is automatically switched if it was changed in the operating system.
- Tiled Fix: TiledLayer parallax default values fix
- API Addition: TiledDrawable: Align can be set to manipulate the alignment of the rendering (TiledDrawable#setAlign, TiledDrawable#getAlign)
- API Addition: TiledDrawable#draw: Also available as a static function (with align) if you don't want to create an extra instance per texture region
- Android: Removed mouse catching added on 1.12.0 due to unintended effects (see #7187).
- Android: Fixed touch state inconsistency when touching screen with 3 fingers on some devices (see #7256)
- iOS: Update to MobiVM 2.3.20
- API Addition: Using "object" property in Tiled object now fetches MapObject being pointed to, and BaseTmxMapLoader includes method for fetching map where key is id and value is MapObject instance.
- Update to LWJGL 3.3.3
- API Addition: Vector4 is just like Vector2 or Vector3, but with x, y, z, and w float components; a Vector4 can be passed as a shader uniform.
- Fix: Fix crash with ANGLE GLES renderer
- API Change: Use STBVorbis to decode ogg data for Sound
- API Change: Remove usage of deprecated tag on GL30
- Lower GLIBC requirements to 2.17 in order to support older Linux systems
- Fix: Fix setCursor releasing the caught cursor on the LWJGL 3 backend.
- Fix crash in ParticleEditor and Flame
- Fix bitwise precedence in ModelBatch#addMesh (float[] vertices, short[] indices)
- Improve the default font's compatibility with GL30
- Fix potential IndexOutOfBoundsException on AsynchronousAndroidSound
- API Addition: GwtGL20 &amp; GwtGL30#glGetFramebufferAttachmentParameteriv
- Fix Tiled classes not being registered in the reflection cache
- Fix: Change androidx.fragment dependency to compileOnly
- Fix borderless fullscreen when taskbar is on the left/top
</code></pre></div></div>]]></content><author><name></name></author><category term="news" /><category term="changelog" /><summary type="html"><![CDATA[We are proud to present a new release of libGDX: version 1.12.1!]]></summary></entry><entry><title type="html">libGDX Jam September 2023</title><link href="https://libgdx.com/news/2023/09/jam-september-2023" rel="alternate" type="text/html" title="libGDX Jam September 2023" /><published>2023-09-03T00:00:00+00:00</published><updated>2023-09-03T00:00:00+00:00</updated><id>https://libgdx.com/news/2023/09/jam-september-2023</id><content type="html" xml:base="https://libgdx.com/news/2023/09/jam-september-2023"><![CDATA[<p>With our 26th collaboration, the <a href="/community/jams/">libGDX Jam</a> continues the time-honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found <a href="/community/jams/#rules">here</a>. <strong>To participate take a look at the official <a href="https://itch.io/jam/libgdx-jam-25">itch.io page of the jam</a>.</strong> The humorous jam trailer can be found on <a href="https://www.youtube.com/watch?v=1o75aXd3xk0">YouTube</a>.</p>

<p>Be sure to get involved with the community by joining the libGDX Discord server!</p>

<h2 id="schedule">Schedule</h2>
<p><em>The theme is yet to be revealed.</em>
<!--The theme is **Pixel Wars**. Good luck everybody!--></p>

<ul>
  <li><strong>Theme Submission:</strong> There is no theme submission for this special jam!</li>
  <li><strong>Voting:</strong> There is no theme voting for this special jam!</li>
  <li><strong>Jam:</strong> 17th - 23rd of September. Participants will create their games and rejoice!</li>
</ul>

<!--## Submissions
The libGDX Jam September 2023 is now over! We hope everyone had a lot of fun and are proud to present the [15 submissions](https://itch.io/jam/libgdx-jam-25/entries). Don't forget to check out our [live-stream playthrough](...) of all the games.-->]]></content><author><name></name></author><category term="news" /><summary type="html"><![CDATA[With our 26th collaboration, the libGDX Jam continues the time-honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found here. To participate take a look at the official itch.io page of the jam. The humorous jam trailer can be found on YouTube.]]></summary></entry><entry><title type="html">Community Showcase: Mundus Editor</title><link href="https://libgdx.com/news/2023/07/mundus-showcase" rel="alternate" type="text/html" title="Community Showcase: Mundus Editor" /><published>2023-07-05T00:00:00+00:00</published><updated>2023-07-05T00:00:00+00:00</updated><id>https://libgdx.com/news/2023/07/mundus-showcase</id><content type="html" xml:base="https://libgdx.com/news/2023/07/mundus-showcase"><![CDATA[<div class="notice--primary">
   <p>
     Hey everybody! As announced last year, we want to give creators of interesting community projects the opportunity to present their exciting libraries or tools on the official blog. In this <b>Community Showcase</b>, JamesTKhan is going to present his <a href="https://github.com/JamesTKhan/Mundus">Mundus library</a>!
   </p>
   <p>
     If you are interested in other cool community projects, be sure to check out the <a href="https://github.com/rafaskb/awesome-libgdx#readme">libGDX Awesome List</a> as well. To participate in future showcases, take a look <a href="https://github.com/libgdx/libgdx.github.io/wiki/Community-Showcases">here</a>.
   </p>
 </div>

<p><img src="/assets/images/posts/2023-07-05/logo.svg" alt="" class="align-center" /></p>

<h1 id="what-is-mundus">What is Mundus</h1>

<p>Mundus is a 3D level editor built with libGDX and provides a libGDX runtime. Mundus was originally created by mbrlabs on GitHub from 2016 to 2018. Development halted on Mundus around 2018. I started working on Mundus in February 2022. I originally started working on a fork from the original repository. Soon after that I detached my fork into its own repository.</p>

<h1 id="why-use-it">Why use it?</h1>

<p>So, what sets Mundus apart? The majority of libGDX users appreciate a code-first approach, prompting some to question the need for a 3D editor for libGDX. In the realm of 2D, libGDX enthusiasts have numerous tools at their disposal, including Tiled and Hyperlap2D, to craft their unique worlds. However, when venturing into the 3D space, the options for fully-functional editors are somewhat limited. There are several 3D editors in various states of development.</p>

<p>This is where Mundus steps in, filling this gap by providing tools for 3D object placement, terrain creation and editing, water rendering, fog, and model rendering. It allows all game logic to be coded as usual within a libGDX runtime application, thus offering a smoother transition into 3D game development.</p>

<p><img src="/assets/images/posts/2023-07-05/screenshot-1.png" alt="" class="align-center" /></p>

<h1 id="features">Features</h1>

<ul>
  <li>A complete terrain editing system.</li>
  <li>Splat map painting as well as sculpting tools.</li>
  <li>Terrain noise and heightmap generation with more improvements in development.</li>
  <li><a href="https://github.com/mgsx-dev/gdx-gltf">gdx-gltf</a> integration for PBR rendering of models and terrains with UI for editing materials with live preview.</li>
  <li>Water rendering with reflections, refractions, foam and lots of options for customizing.</li>
  <li>Skybox rendering with easy setup via UI.</li>
  <li>Projects can have multiple scenes.</li>
  <li>Component based scenegraph with parent to child relationships.</li>
  <li>GWT support.</li>
  <li>Asset cleanup system.</li>
  <li>Asynchronous project loading.</li>
</ul>

<div style="max-width: 720px; margin-left: auto; margin-right: auto;">
      



<div class="carousel__holder">
    <div class="carousel">
        
          <input class="carousel__activator" type="radio" name="carousel" id="a" checked="checked" />
        
          <input class="carousel__activator" type="radio" name="carousel" id="b" />
        
          <input class="carousel__activator" type="radio" name="carousel" id="c" />
        
          <input class="carousel__activator" type="radio" name="carousel" id="d" />
        
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="d"></label>
              <label class="carousel__control carousel__control--forward" for="b"></label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="a"></label>
              <label class="carousel__control carousel__control--forward" for="c"></label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="b"></label>
              <label class="carousel__control carousel__control--forward" for="d"></label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="c"></label>
              <label class="carousel__control carousel__control--forward" for="a"></label>
          </div>
        
        <div class="carousel__track">
          <ul>
            
             <li class="carousel__slide" style="background-image: url('/assets/images/posts/2023-07-05/carousel-1.png');">
               
             </li>

            
             <li class="carousel__slide" style="background-image: url('/assets/images/posts/2023-07-05/carousel-2.png');">
               
             </li>

            
             <li class="carousel__slide" style="background-image: url('/assets/images/posts/2023-07-05/carousel-3.png');">
               
             </li>

            
             <li class="carousel__slide" style="background-image: url('/assets/images/posts/2023-07-05/carousel-4.png');">
               
             </li>

            
          </ul>
        </div>
        <div class="carousel__indicators">
            
              <label class="carousel__indicator" for="a"></label>
            
              <label class="carousel__indicator" for="b"></label>
            
              <label class="carousel__indicator" for="c"></label>
            
              <label class="carousel__indicator" for="d"></label>
            
        </div>
    </div>
</div>

<style>
.carousel__holder {width: 100%; position: relative; padding-bottom: 400px; margin: 1rem 0 1rem;}
.carousel {
  height: 100%;
  width: 100%;
  overflow: hidden;
  text-align: center;
  position: absolute;
  padding: 0;
}
.carousel__controls,
.carousel__activator {
  display: none;
}

.carousel__activator:nth-of-type(1):checked ~ .carousel__track {
  -webkit-transform: translateX(-000%);
          transform: translateX(-000%);
}
.carousel__activator:nth-of-type(1):checked ~ .carousel__slide:nth-of-type(1) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
@media (prefers-reduced-motion) {
  .carousel__activator:nth-of-type(1):checked ~ .carousel__slide:nth-of-type(1) {
    transition: none;
  }
}
.carousel__activator:nth-of-type(1):checked ~ .carousel__controls:nth-of-type(1) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(1):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(1) {
  opacity: 1;
}

.carousel__activator:nth-of-type(2):checked ~ .carousel__track {
  -webkit-transform: translateX(-100%);
          transform: translateX(-100%);
}
.carousel__activator:nth-of-type(2):checked ~ .carousel__slide:nth-of-type(2) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
@media (prefers-reduced-motion) {
  .carousel__activator:nth-of-type(2):checked ~ .carousel__slide:nth-of-type(2) {
    transition: none;
  }
}
.carousel__activator:nth-of-type(2):checked ~ .carousel__controls:nth-of-type(2) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(2):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(2) {
  opacity: 1;
}

.carousel__activator:nth-of-type(3):checked ~ .carousel__track {
  -webkit-transform: translateX(-200%);
          transform: translateX(-200%);
}
.carousel__activator:nth-of-type(3):checked ~ .carousel__slide:nth-of-type(3) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
@media (prefers-reduced-motion) {
  .carousel__activator:nth-of-type(3):checked ~ .carousel__slide:nth-of-type(3) {
    transition: none;
  }
}
.carousel__activator:nth-of-type(3):checked ~ .carousel__controls:nth-of-type(3) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(3):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(3) {
  opacity: 1;
}

.carousel__activator:nth-of-type(4):checked ~ .carousel__track {
  -webkit-transform: translateX(-300%);
          transform: translateX(-300%);
}
.carousel__activator:nth-of-type(4):checked ~ .carousel__slide:nth-of-type(4) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
@media (prefers-reduced-motion) {
  .carousel__activator:nth-of-type(4):checked ~ .carousel__slide:nth-of-type(4) {
    transition: none;
  }
}
.carousel__activator:nth-of-type(4):checked ~ .carousel__controls:nth-of-type(4) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(4):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(4) {
  opacity: 1;
}


.overlay-fade-content:hover {
  opacity: 1;
  background-color: rgba(255,255,255,0.4);
  transition: all 0.25s ease-in;
}

.overlay-fade-content {
  opacity: 0;
  background-color: rgba(255,255,255,0);
}

.overlay-fade-content a {
    box-sizing: border-box;
    text-decoration: none;
    display: block;
    color: #eeeeee;
    background-color: #ff3b05;
    border-radius: 3px;
    text-align: center;
    margin: auto;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    width: 200px;
    height: 60px;
    line-height: 25px;
    position: absolute;
    font-size: 14px;
    font-weight: bold;
    padding-top: 5px;
    padding-bottom: 5px;
}


.carousel__control {
  height: 30px;
  width: 30px;
  margin-top: -15px;
  top: 50%;
  position: absolute;
  display: block;
  cursor: pointer;
  border-width: 5px 5px 0 0;
  border-style: solid;
  border-color:  #fafafa ;
  opacity: 0.35;
  opacity: 1;
  outline: 0;
  z-index: 3;
}
.carousel__control:hover {
  opacity: 1;
}
.carousel__control--backward {
  left: 20px;
  -webkit-transform: rotate(-135deg);
          transform: rotate(-135deg);
}
.carousel__control--forward {
  right: 20px;
  -webkit-transform: rotate(45deg);
          transform: rotate(45deg);
}
.carousel__indicators {
  position: absolute;
  bottom: 20px;
  width: 100%;
  text-align: center;
}
.carousel__indicator {
  height: 15px;
  width: 15px;
  border-radius: 100%;
  display: inline-block;
  z-index: 2;
  cursor: pointer;
  opacity: 0.35;
  margin: 0 2.5px 0 2.5px;
}
.carousel__indicator:hover {
  opacity: 0.75;
}
.carousel__track {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  padding: 0;
  margin: 0;
  transition: -webkit-transform 0.5s ease 0s;
  transition: transform 0.5s ease 0s;
  transition: transform 0.5s ease 0s, -webkit-transform 0.5s ease 0s;
}
.carousel__track .carousel__slide {
  display: block;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
}

.carousel__track .carousel__slide:nth-of-type(1) {
  -webkit-transform: translateX(000%);
          transform: translateX(000%);
}

.carousel__track .carousel__slide:nth-of-type(2) {
  -webkit-transform: translateX(100%);
          transform: translateX(100%);
}

.carousel__track .carousel__slide:nth-of-type(3) {
  -webkit-transform: translateX(200%);
          transform: translateX(200%);
}

.carousel__track .carousel__slide:nth-of-type(4) {
  -webkit-transform: translateX(300%);
          transform: translateX(300%);
}


.carousel__slide {
  height: 100%;
  position: absolute;
  opacity: 0;
  overflow: hidden;
}
.carousel__slide .overlay {height: 100%;}
.carousel--thumb .carousel__indicator {
  height: 30px;
  width: 30px;
}
.carousel__indicator {
  background-color:  #fafafa ;
}

.carousel__slide:nth-of-type(1),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(1) {
  background-size: cover;
  background-position: center;
}

.carousel__slide:nth-of-type(2),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(2) {
  background-size: cover;
  background-position: center;
}

.carousel__slide:nth-of-type(3),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(3) {
  background-size: cover;
  background-position: center;
}

.carousel__slide:nth-of-type(4),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(4) {
  background-size: cover;
  background-position: center;
}

</style>

<script>
  function isVisible(el) {
        while (el) {
            if (el === document) {
                return true;
            }

            var $style = window.getComputedStyle(el, null);

            if (!el) {
                return false;
            } else if (!$style) {
                return false;
            } else if ($style.display === 'none') {
                return false;
            } else if ($style.visibility === 'hidden') {
                return false;
            } else if (+$style.opacity === 0) {
                return false;
            } else if (($style.display === 'block' || $style.display === 'inline-block') &&
                $style.height === '0px' && $style.overflow === 'hidden') {
                return false;
            } else {
                return $style.position === 'fixed' || isVisible(el.parentNode);
            }
        }
  }
  
  if (!window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
    setInterval(function(){
      var j=0;
      var elements = document.querySelectorAll('.carousel__control--forward');
      for(i=(elements.length - 1);i>-1;i--) {
        if(isVisible(elements[i])) j=i;
      }
      elements[j].click();
    },7000);
  }
  
</script>

</div>

<h1 id="motivations-and-future">Motivations and Future</h1>

<p>My personal motivation for working on Mundus stems from a combination of my enjoyment of the project and my goals to make 3D development more accessible for the libGDX community. It is my hope that Mundus will inspire more people to contribute to libGDX 3D APIs and Mundus.</p>

<p>Mundus version 0.5.0 was just released on June 30th, 2023 and several features are already in development for 0.6.0.</p>

<!-- Courtesy of embedresponsively.com //-->

<div class="responsive-video-container">
    <iframe src="https://www.youtube-nocookie.com/embed/e7g5q4I1gdM" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
  </div>

<p>I do not work on Mundus alone though. Making an editor like this is a challenge and requires herculean effort. We encourage contributions and I mark issues with “good first issue” to encourage new contributors. DGZT contributes fixes and features and Antz has been invaluable in testing Mundus and suggesting enhancements.</p>

<p>You can check out other games made with Mundus in our <a href="https://github.com/JamesTKhan/Mundus#made-with-mundus">“Made with Mundus”</a> section!</p>

<h1 id="how-to-get-started">How to get started</h1>
<ul>
  <li>Check out the wiki <a href="https://github.com/JamesTKhan/Mundus/wiki">here</a> (Mundus is under alot of development so some guides may fall out of date)</li>
  <li>We also provide a runtime example application you can run locally <a href="https://github.com/JamesTKhan/MundusRuntimeExample">here</a></li>
</ul>]]></content><author><name></name></author><category term="news" /><summary type="html"><![CDATA[JamesTKhan presents Mundus Editor and libGDX runtime]]></summary></entry><entry><title type="html">libGDX 1.12.0</title><link href="https://libgdx.com/news/2023/07/gdx-1-12" rel="alternate" type="text/html" title="libGDX 1.12.0" /><published>2023-07-02T00:00:00+00:00</published><updated>2023-07-02T00:00:00+00:00</updated><id>https://libgdx.com/news/2023/07/gdx-1-12</id><content type="html" xml:base="https://libgdx.com/news/2023/07/gdx-1-12"><![CDATA[<p class="notice--primary no-top-margin">If you are looking for past changelogs, check out <a href="/news/changelog/">this</a> page.</p>

<p>Since our last release a little over a year ago, a great deal of work has been done! libGDX 1.12.0 includes some exciting new features as well as all-around improvements in various areas. Take a look below to find out more!</p>

<h3 id="audio-switch-api">Audio Switch API</h3>
<p>On the LWJGL 3 backend, we now offer an audio switch API (<a href="https://github.com/libgdx/libgdx/pull/6973">#6973</a>). This has three advantages:</p>
<ul>
  <li>The output device is automatically switched if the current one is disconnected (e.g., when headphones get unplugged). This is mainly relevant on Windows, where previously the audio just died in this case.</li>
  <li>The default output device is reevaluated if a new device gets connected. I.e., the application may switch to the new audio device (upon the OS’s decision).</li>
  <li>It is now possible to select a specific audio device. See <code class="language-plaintext highlighter-rouge">Audio#switchOutputDevice</code> and <code class="language-plaintext highlighter-rouge">Audio#getAvailableOutputDevices</code></li>
</ul>

<h3 id="haptics-api">Haptics API</h3>
<p>libGDX 1.12.0 adds a Haptics API for iOS and Android. Check out the four <code class="language-plaintext highlighter-rouge">Input#vibrate</code> methods for more information.</p>

<h3 id="metalangle-backend">MetalANGLE Backend</h3>
<p>We have recently added a new MobiVM MetalANGLE backend (<a href="https://github.com/libgdx/libgdx/pull/6681">#6681</a>). This backend uses <a href="https://github.com/kakashidinho/metalangle">MetalANGLE</a> (a fork of Google’s <a href="https://github.com/google/angle">ANGLE</a>) to translate OpenGL specific calls into Metal ones. This is an important step in making the iOS backend future proof, considering that Apple has deprecated OpenGL support on its devices. To use this backend just replace <code class="language-plaintext highlighter-rouge">gdx-backend-robovm</code> in your dependencies with <code class="language-plaintext highlighter-rouge">gdx-backend-robovm-metalangle</code>.</p>

<h3 id="opengl-es-31--32-support-for-lwjgl-3">OpenGL ES 3.1 &amp; 3.2 Support for LWJGL 3</h3>
<p>The LWJGL 3 backend now supports OpenGL ES 3.1 &amp; 3.2 (<a href="https://github.com/libgdx/libgdx/pull/6945">#6945</a>). This allows for some interesting features in the future, like <a href="https://github.com/mgsx-dev/libgdx/tree/modern-shaders/compute">compute shaders</a> and <a href="https://github.com/libgdx/libgdx/pull/4963">geometry and tessellation shaders</a>.</p>

<h3 id="webgl-2">WebGL 2</h3>
<p>The GWT backend now supports WebGL 2 (<a href="https://github.com/libgdx/libgdx/pull/7037">#7037</a>), which is the Web equivalent of OpenGL ES 3.0. This means that all of our backends now support OpenGL ES 3.0 (or at least most of its API)! To try it out, use <code class="language-plaintext highlighter-rouge">GwtApplicationConfiguration#useGL30</code>.</p>

<h2 id="a-few-notable-changes">A few notable changes</h2>
<ul>
  <li>Touch cancel events (e.g., when the lock button is used while currently touching the screen) are now properly handled on iOS and Android. In those cases, libGDX 1.12.0 calls <code class="language-plaintext highlighter-rouge">InputProcessor#touchCancelled</code> instead of <code class="language-plaintext highlighter-rouge">InputProcessor#touchUp</code> (see <a href="https://github.com/libgdx/libgdx/pull/6871">#6871</a>); to keep the old behaviour, let your <code class="language-plaintext highlighter-rouge">#touchCancelled</code> implementations call <code class="language-plaintext highlighter-rouge">#touchUp</code>.</li>
  <li>Updated to <a href="https://github.com/MobiVM/robovm/wiki/Changelog#2319-march-2023">MobiVM 2.3.19</a> from 2.3.16. This adds iOS 16 bindings.</li>
  <li>Updated to <a href="https://github.com/LWJGL/lwjgl3/releases/tag/3.3.2">LWJGL 3.3.2</a> from 3.3.1.</li>
</ul>

<h3 id="other-breaking-changes">Other breaking changes</h3>
<p><strong>Android:</strong></p>
<ul>
  <li>On Android, immersive mode is now true by default. Set <code class="language-plaintext highlighter-rouge">AndroidApplicationConfiguration#useImmersiveMode</code> to <code class="language-plaintext highlighter-rouge">false</code> to disable it.</li>
</ul>

<p><strong>Desktop:</strong></p>
<ul>
  <li>The return value of <code class="language-plaintext highlighter-rouge">AudioDevice#getLatency()</code> is now in samples, and not milliseconds</li>
  <li>We had to drop support for older libc versions since libGDX is now built on Ubuntu 20.04 (see <a href="https://github.com/libgdx/libgdx/pull/7005">#7005</a>)</li>
</ul>

<p><strong>iOS:</strong></p>
<ul>
  <li>We increased the minimum supported iOS version to 11.0. Update your <code class="language-plaintext highlighter-rouge">Info.plist</code> file if necessary.</li>
  <li>32 bit (armv7) builds are no longer supported. Builds must be 64 bit (arm64) only.</li>
  <li>We now use dynamic frameworks instead of static libs</li>
  <li><code class="language-plaintext highlighter-rouge">IOSApplicationConfiguration#hideHomeIndicator</code> is now set to <code class="language-plaintext highlighter-rouge">false</code> by default</li>
  <li><code class="language-plaintext highlighter-rouge">IOSApplicationConfiguration#screenEdgesDeferringSystemGestures</code> is now set to <code class="language-plaintext highlighter-rouge">UIRectEdge.All</code> by default (was <code class="language-plaintext highlighter-rouge">UIRectEdge.None</code>)</li>
  <li>The preferred FPS on iOS are now uncapped</li>
  <li>On iOS, <code class="language-plaintext highlighter-rouge">ApplicationListener#create</code> and the first <code class="language-plaintext highlighter-rouge">#resize</code> are now called within <code class="language-plaintext highlighter-rouge">UIApplicationDelegate#didFinishLaunching</code>. This allows for earlier rendering and prevents black screen frames after launch screen. Please note, that your app will get terminated if this method blocks for more than 10-20 seconds!</li>
</ul>

<p><strong>Scene2D:</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Actor#localToAscendantCoordinates</code> throws an exception if the specified actor is not an ascendant.</li>
  <li><code class="language-plaintext highlighter-rouge">WidgetGroup#hit</code> first validates the layout</li>
  <li>The <code class="language-plaintext highlighter-rouge">Cell</code> getters return object wrappers instead of primitives.</li>
</ul>

<p><strong>3D:</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">MeshPartBuilder#lastIndex</code> now returns an int instead of a short</li>
  <li>The max bone weight is now configurable and limited to 4 by default (see <a href="https://github.com/libgdx/libgdx/pull/6522">#6522</a>).</li>
  <li><code class="language-plaintext highlighter-rouge">Mesh#getVerticesBuffer</code>, <code class="language-plaintext highlighter-rouge">Mesh#getIndicesBuffer</code>, <code class="language-plaintext highlighter-rouge">VertexData#getBuffer</code>, and <code class="language-plaintext highlighter-rouge">IndexData#getBuffer</code> are deprecated in favour of new methods with a boolean parameter.</li>
  <li><code class="language-plaintext highlighter-rouge">Mesh#bind</code> and <code class="language-plaintext highlighter-rouge">Mesh#unbind</code> have a new parameter for instanced attribute locations. If you use these methods without instancing, you can pass a null value.</li>
</ul>

<h3 id="full-changelog">Full changelog</h3>
<p class="notice--info">Updating your Gradle project is straight-forward: Check out the instructions <a href="/wiki/articles/updating-libgdx">on the wiki</a>! The latest version of dependencies can, as always, be found <a href="/dev/versions/">here</a>.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- [BREAKING CHANGE] Added #touchCancelled to InputProcessor interface, see #6871.
- [BREAKING CHANGE] Android: Immersive mode is now true by default. Set `useImmersiveMode` config to `false` to disable it.
- [BREAKING CHANGE] iOS: Increased min supported iOS version to 11.0. Update your Info.plist file if necessary.
- [BREAKING CHANGE] iOS: `hideHomeIndicator` set to `false` by default (was `true`).
- [BREAKING CHANGE] iOS: `screenEdgesDeferringSystemGestures` set to `UIRectEdge.All` by default (was `UIRectEdge.None`).
- [BREAKING CHANGE] iOS: preferred FPS is now uncapped by default, see #6717
- [BREAKING CHANGE] iOS: `ApplicationListener.create` and first `resize` are now called within `UIApplicationDelegate.didFinishLaunching`. Allows for earlier rendering and prevents black screen frames after launch screen. NOTE: App will get terminated if this method is blocked for more than 10-20 sec.
- [BREAKING CHANGE] Actor#localToAscendantCoordinates throws an exception if the specified actor is not an ascendant.
- [BREAKING CHANGE] WidgetGroup#hit first validates the layout.
- [BREAKING CHANGE] Cell getters return object wrapper instead of primitives.
- [BREAKING CHANGE] MeshPartBuilder#lastIndex now returns int instead of short.
- [BREAKING CHANGE] 3D API - max bone weights is now configurable and limited to 4 by default. Change this value if you need less or more. See #6522.
- [BREAKING CHANGE] Mesh#getVerticesBuffer, Mesh#getIndicesBuffer, VertexData#getBuffer, and IndexData#getBuffer are deprecated in favor to new methods with boolean parameter. If you subclassed some of these classes, you need to implement the new methods.
- [BREAKING CHANGE] Desktop: The return value of AudioDevice#getLatency() is now in samples, and not milliseconds
- [BREAKING CHANGE] iOS: 32 bit (armv7) builds are no longer supported. Builds must be 64 bit (arm64) only.
- [BREAKING CHANGE] iOS: Use dynamic frameworks instead of static libs
- [BREAKING CHANGE] optimized Mesh#bind and Mesh#unbind have a new parameter for instanced attribute locations. If you use these methods without instancing, you can pass a null value.
- [BREAKING CHANGE] Dropped support for older libc versions since libGDX is now built on Ubuntu 20.04  (#7005)
- Update to jnigen 2.4.1
- LWJGL Fix: setPosision() for MP3 files.
- iOS: Add new MobiVM MetalANGLE backend
- iOS: Update to MobiVM 2.3.19
- Update to LWJGL 3.3.2
- API Addition: Added Audio#switchOutputDevice and Audio#getAvailableOutputDevices to specify output devices. Only works for LWJGL3
- Fix LWJGL3: Audio doesn't die anymore, if a device gets disconnected
- API Addition: Added Haptics API with 4 different Input#vibrate() methods with complete Android and iOS implementations.
- Fix: Fixed Android and iOS touch cancelled related issues, see #6871.
- Javadoc: Add "-use" flag to javadoc generation
- Android: gdx-setup now uses AGP 7.2.2 and SDK 32, requiring Android Studio Chipmunk or IntelliJ IDEA 2022.2 and JDK 11.
- libGDX is now built using Java 11 due to new Android requirements. The rest of libGDX can still be built with JDK 8 and runtime compatibility of libGDX projects should be unaffected.
- Fixed glViewport when using HdpiMode.Logical with the LWJGL3 backend.
- Added Stage#actorRemoved to fire exit events just before an actor is removed.
- ScrollPane#setScrollingDisabled avoids invalidate() if nothing changed.
- Fixed incorrect ScrollPane#scrollTo.
- API Addition: Added Texture3D support
- Fix: Throw an exception when maximum Attribute count is reached to prevent silent failure.
- API Fix: The cursor can now be catched on Android.
- LWJGL3 Fix: Stereo audio can now be played on mono output devices. This may also improve downmixing to stereo and upmixing to surround.
- API Addition: Added CheckBox#getImageDrawable.
- FIX: HexagonalTiledMapRenderer now displays maps with the correct stagger index.
- API Addition: Added I18NBundle#keys() method.
- TOOLS Features: Save mode can be changed in Flame particle 3D editor.
- API Addition: added WebGL 2.0 implementation to Gwt backend : you can enable it by GwtApplicationConfiguration#useGL30
- Added GLES31 and GLES32 support with Lwjgl3 backend implementation
- API Addition: JsonReader#stop() to stop parsing.
- API Change: TextureAtlas now uses FileHandle#reader so outside code can control the charset
- API Fix: Intersector#isPointInTriangle
- API Addition: The Skin serializer now supports useIntegerPositions
- API Change: The skin serializer now treats scaledSize as a float
- API Change: DataInput throws an EOF-Exception
- API Fix: RenderBuffer leak in GLFrameBuffer class
- API Change: Pixmap#setPixels will now verify it has been given a direct ByteBuffer
- API Addition: glTexImage2D and glTexSubImage2D with offset parameter
- API Addition: OrientedBoundingBox
- API Addition: Tiled parallax factor support
- API Fix: LWJGL 3’s borderless fullscreen works with negative monitor coords
- API Fix: Update mouse x and y values immediately after calling #setCursorPosition
- API Change: Never stall with AssetManager on GWT
- API Change: Allow packed depth stencil buffer creation when not using GL30
- API Fix: Fixed DataInput#readString for non-ASCII
- API Fix: LwjglGraphics.setupDisplay() is no longer choosing the wrong display mode
- API Fix: MathUtils.lerpAngle() fixed for extreme inputs
- MathUtils trigonometry improvements
- Various Scene2D fixes and improvements
</code></pre></div></div>]]></content><author><name></name></author><category term="news" /><category term="changelog" /><summary type="html"><![CDATA[We are proud to present a new major release of libGDX: version 1.12.0!]]></summary></entry><entry><title type="html">libGDX Jam June 2023</title><link href="https://libgdx.com/news/2023/06/jam-june-2023" rel="alternate" type="text/html" title="libGDX Jam June 2023" /><published>2023-06-08T00:00:00+00:00</published><updated>2023-06-08T00:00:00+00:00</updated><id>https://libgdx.com/news/2023/06/jam-june-2023</id><content type="html" xml:base="https://libgdx.com/news/2023/06/jam-june-2023"><![CDATA[<p>With our 25th collaboration, the <a href="/community/jams/">libGDX Jam</a> continues the time-honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found <a href="/community/jams/#rules">here</a>. <strong>To participate take a look at the official <a href="https://itch.io/jam/libgdx-jam-25">itch.io page of the jam</a>.</strong> The jam trailer can be found on <a href="https://www.youtube.com/watch?v=aoDGmPSugA8">YouTube</a>.</p>

<p>Be sure to get involved with the community by joining the libGDX Discord server!</p>

<h2 id="schedule">Schedule</h2>
<p>The theme is <strong>Underwater</strong>. Good luck everybody!</p>

<ul>
  <li><strong>Theme Submission:</strong> 11th - 13th of June. Everyone will be allowed to submit a theme for the jam.</li>
  <li><strong>Voting:</strong> 15th - 17th of June.  Everyone will vote on their favourite theme. May the best win!</li>
  <li><strong>Jam:</strong> 18th - 24th of June. Participants will create their games and rejoice!</li>
</ul>

<h2 id="submissions">Submissions</h2>
<p>The libGDX Jam June 2023 is now over! We hope everyone had a lot of fun and are proud to present the <a href="https://itch.io/jam/libgdx-jam-25/entries">15 submissions</a>.</p>]]></content><author><name></name></author><category term="news" /><summary type="html"><![CDATA[With our 25th collaboration, the libGDX Jam continues the time-honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found here. To participate take a look at the official itch.io page of the jam. The jam trailer can be found on YouTube.]]></summary></entry><entry><title type="html">libGDX Jam March 2023</title><link href="https://libgdx.com/news/2023/03/jam-march-2023" rel="alternate" type="text/html" title="libGDX Jam March 2023" /><published>2023-03-17T00:00:00+00:00</published><updated>2023-03-17T00:00:00+00:00</updated><id>https://libgdx.com/news/2023/03/jam-march-2023</id><content type="html" xml:base="https://libgdx.com/news/2023/03/jam-march-2023"><![CDATA[<p>With our 24th collaboration, the <a href="/community/jams/">libGDX Jam</a> continues the time-honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found <a href="/community/jams/#rules">here</a>. <strong>To participate take a look at the official <a href="https://itch.io/jam/libgdx-jam-24">itch.io page of the jam</a>.</strong> The jam trailer can be found on <a href="https://youtu.be/z8FIxkluX4M">YouTube</a>.</p>

<p>Be sure to get involved with the community by joining the libGDX Discord server!</p>

<h2 id="schedule">Schedule</h2>
<!--_The theme is yet to be determined._-->
<p>The theme is <strong>Pixel Wars</strong>. Good luck everybody!</p>

<ul>
  <li><strong>Theme Submission:</strong> 12th - 14th of March. Everyone will be allowed to submit a theme for the jam.</li>
  <li><strong>Voting:</strong> 16th - 18th of March.  Everyone will vote on their favourite theme. May the best win!</li>
  <li><strong>Jam:</strong> 18th - 25th of March. Participants will create their games and rejoice!</li>
</ul>

<h2 id="submissions">Submissions</h2>
<p>The libGDX Jam March 2023 is now over! We hope everyone had a lot of fun and are proud to present the <a href="https://itch.io/jam/libgdx-jam-24/entries">15 submissions</a>.</p>]]></content><author><name></name></author><category term="news" /><summary type="html"><![CDATA[With our 24th collaboration, the libGDX Jam continues the time-honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found here. To participate take a look at the official itch.io page of the jam. The jam trailer can be found on YouTube.]]></summary></entry><entry><title type="html">libGDX Jam December 2022</title><link href="https://libgdx.com/news/2022/12/jam-december-2022" rel="alternate" type="text/html" title="libGDX Jam December 2022" /><published>2022-12-05T00:00:00+00:00</published><updated>2022-12-05T00:00:00+00:00</updated><id>https://libgdx.com/news/2022/12/jam-december-2022</id><content type="html" xml:base="https://libgdx.com/news/2022/12/jam-december-2022"><![CDATA[<p>With our 23rd collaboration, the <a href="/community/jams/">libGDX Jam</a> continues the time-honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found <a href="/community/jams/#rules">here</a>. <strong>To participate take a look at the official <a href="https://itch.io/jam/libgdx-jam-23">itch.io page of the jam</a>.</strong> The jam trailer can be found on <a href="https://www.youtube.com/watch?v=cWRnjphry2A">YouTube</a>.</p>

<p>Be sure to get involved with the community by joining the libGDX Discord server!</p>

<h2 id="schedule">Schedule</h2>
<!--_The theme is yet to be determined._-->
<p>The theme is <strong>Dystopian Christmas</strong>. Good luck everybody!</p>

<ul>
  <li><strong>Theme Submission:</strong> 4th - 6th of December. Everyone will be allowed to submit a theme for the jam.</li>
  <li><strong>Voting:</strong> 8th - 10th of December.  Everyone will vote on their favourite theme. May the best win!</li>
  <li><strong>Jam:</strong> 11th - 17th of December. Participants will create their games and rejoice!</li>
</ul>

<h2 id="submissions">Submissions</h2>
<p>The libGDX Jam December 2022 is now over! We hope everyone had a lot of fun and are proud to present the <a href="https://itch.io/jam/libgdx-jam-23/entries">15 submissions</a>.</p>]]></content><author><name></name></author><category term="news" /><summary type="html"><![CDATA[With our 23rd collaboration, the libGDX Jam continues the time-honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found here. To participate take a look at the official itch.io page of the jam. The jam trailer can be found on YouTube.]]></summary></entry><entry><title type="html">libGDX Jam September 2022</title><link href="https://libgdx.com/news/2022/09/jam-september-2022" rel="alternate" type="text/html" title="libGDX Jam September 2022" /><published>2022-09-01T00:00:00+00:00</published><updated>2022-09-01T00:00:00+00:00</updated><id>https://libgdx.com/news/2022/09/jam-september-2022</id><content type="html" xml:base="https://libgdx.com/news/2022/09/jam-september-2022"><![CDATA[<p>With our 22nd collaboration, the <a href="/community/jams/">libGDX Jam</a> continues the time-honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found <a href="/community/jams/#rules">here</a>. <strong>To participate take a look at the official <a href="https://itch.io/jam/libgdx-jam-22">itch.io page of the jam</a>.</strong> The jam trailer can be found on <a href="https://www.youtube.com/watch?v=HNchS56ByWU">YouTube</a>.</p>

<p>Be sure to get involved with the community by joining the libGDX Discord server!</p>

<h2 id="schedule">Schedule</h2>
<p>The theme is <strong>Post Apocalyptic</strong>. Good luck everybody!</p>

<ul>
  <li><strong>Theme Submission:</strong> 11th - 13th of September. Everyone will be allowed to submit a theme for the jam.</li>
  <li><strong>Voting:</strong> 15th - 17th of September.  Everyone will vote on their favourite theme. May the best win!</li>
  <li><strong>Jam:</strong> 18th - 24th of September. Participants will create their games and rejoice!</li>
</ul>

<h2 id="submissions">Submissions</h2>
<p>The libGDX Jam September 2022 is now over! We hope everyone had a lot of fun and are proud to present the <a href="https://itch.io/jam/libgdx-jam-22/entries">16 submissions</a>.</p>]]></content><author><name></name></author><category term="news" /><summary type="html"><![CDATA[With our 22nd collaboration, the libGDX Jam continues the time-honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found here. To participate take a look at the official itch.io page of the jam. The jam trailer can be found on YouTube.]]></summary></entry><entry><title type="html">libGDX Jam June 2022</title><link href="https://libgdx.com/news/2022/06/jam-june-2022" rel="alternate" type="text/html" title="libGDX Jam June 2022" /><published>2022-06-01T00:00:00+00:00</published><updated>2022-06-01T00:00:00+00:00</updated><id>https://libgdx.com/news/2022/06/jam-june-2022</id><content type="html" xml:base="https://libgdx.com/news/2022/06/jam-june-2022"><![CDATA[<p>With our 21st collaboration, the <a href="/community/jams/">libGDX Jam</a> continues the time honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found <a href="/community/jams/#rules">here</a>. <strong>To participate take a look at the official <a href="https://itch.io/jam/libgdx-jam-21">itch.io page of the jam</a>.</strong> The official jam trailer can be found on <a href="https://www.youtube.com/watch?v=fvhC0URjW00">YouTube</a>.</p>

<p>Be sure to get involved with the community by joining the libGDX Discord server!</p>

<h2 id="schedule">Schedule</h2>
<!--_The theme is yet to be determined._-->
<p>The theme is <strong>Floating Cities</strong>. Good luck everybody!</p>

<ul>
  <li><strong>Theme Submission:</strong> 13th - 15th of June. Everyone will be allowed to submit a theme for the jam.</li>
  <li><strong>Voting:</strong> 16th - 18th of June.  Everyone will vote on their favourite theme. May the best win!</li>
  <li><strong>Jam:</strong> 19th - 25th of June. Participants will create their games and rejoice!</li>
</ul>

<h2 id="submissions">Submissions</h2>
<p>The libGDX Jam June 2022 is now over! We hope everyone had a lot of fun and are proud to present the <a href="https://itch.io/jam/libgdx-jam-21/entries">15 submissions</a>. Don’t forget to check out our <a href="https://www.youtube.com/watch?v=CEamuhDWML8">live-stream playthrough</a> of all the games.</p>]]></content><author><name></name></author><category term="news" /><summary type="html"><![CDATA[With our 21st collaboration, the libGDX Jam continues the time honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found here. To participate take a look at the official itch.io page of the jam. The official jam trailer can be found on YouTube.]]></summary></entry><entry><title type="html">libGDX 1.11.0</title><link href="https://libgdx.com/news/2022/05/gdx-1-11" rel="alternate" type="text/html" title="libGDX 1.11.0" /><published>2022-05-11T00:00:00+00:00</published><updated>2022-05-11T00:00:00+00:00</updated><id>https://libgdx.com/news/2022/05/gdx-1-11</id><content type="html" xml:base="https://libgdx.com/news/2022/05/gdx-1-11"><![CDATA[<p class="notice--primary no-top-margin">If you are looking for past changelogs, check out <a href="/news/changelog/">this</a> page.</p>

<p>Since our last release a little over a year ago, a great deal of work has been done! libGDX 1.11.0 brings improvements and new features in various areas – take a look below to find out more! If you are upgrading from an older version, be sure to also check out the <a href="/news/2021/04/the-ultimate-migration-guide">Ultimate Migration Guide (1.9.10 to 1.10.0)</a>.</p>

<h3 id="lwjgl-3">LWJGL 3!</h3>
<p>As announced in <a href="/news/2021/07/devlog-7-lwjgl3">Status Report #7</a>, the LWJGL 3 backend is now the default desktop backend. This ensures continued support for newer hardware and JVMs and includes a few other nifty features. Check out the Status Report to see how to <a href="/news/2021/07/devlog-7-lwjgl3#how-can-i-migrate">update your projects</a>, if you haven’t already! We also updated from LWJGL 3.2.3 to <a href="https://github.com/LWJGL/lwjgl3/releases/tag/3.3.1">3.3.1</a>, which adds the long awaited <strong>M1 Mac support</strong>!</p>

<p>Another cool new feature is the (<a href="https://github.com/libgdx/libgdx/issues?q=is%3Aissue+is%3Aopen+label%3Aglfw-awt-macos">experimental</a>) <strong><code class="language-plaintext highlighter-rouge">gdx-lwjgl3-glfw-awt-macos</code> extension</strong>. If you add it as a dependency to your desktop project (<code class="language-plaintext highlighter-rouge">api "com.badlogicgames.gdx:gdx-lwjgl3-glfw-awt-macos:$gdxVersion"</code>), LWJGL 3/libGDX must no longer run on the main thread in macOS, which allows AWT to work in parallel, i.e. file dialogs, JFrames, ImageIO, etc. can be used. Moreover, you no longer need to pass the <code class="language-plaintext highlighter-rouge">-XstartOnFirstThread</code> argument when starting a LWJGL 3 app on macOS. See <code class="language-plaintext highlighter-rouge">AwtTestLWJGL</code> in gdx-tests-lwjgl3 for an example. For more information, take a look at <a href="https://github.com/libgdx/libgdx/pull/6772">#6772</a>.</p>

<p>In addition, legacy LWJGL 3 projects must update their <code class="language-plaintext highlighter-rouge">sourceCompatibility</code> to <code class="language-plaintext highlighter-rouge">1.8</code> or higher! Otherwise an error similar to the one below will appear:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Execution failed <span class="k">for </span>task <span class="s1">':desktop:compileJava'</span><span class="nb">.</span>
<span class="o">&gt;</span> Could not resolve all files <span class="k">for </span>configuration <span class="s1">':desktop:compileClasspath'</span><span class="nb">.</span>
   <span class="o">&gt;</span> Could not resolve com.badlogicgames.gdx:gdx-backend-lwjgl3:1.11.0.
     Required by:
         project :desktop
      <span class="o">&gt;</span> No matching variant of com.badlogicgames.gdx:gdx-backend-lwjgl3:1.11.0 was found. The consumer was configured to find an API of a library compatible with Java 7, preferably <span class="k">in </span>the form of class files, and its dependencies declared externally but:
          - Variant <span class="s1">'apiElements'</span> capability com.badlogicgames.gdx:gdx-backend-lwjgl3:1.11.0 declares an API of a library, packaged as a jar, and its dependencies declared externally:
              - Incompatible because this component declares a component compatible with Java 8 and the consumer needed a component compatible with Java 7
      <span class="o">[</span>...]
</code></pre></div></div>

<p>Furthermore:</p>
<ul>
  <li>Please note that <code class="language-plaintext highlighter-rouge">Lwjgl3ApplicationConfiguration#useOpenGL3</code> was replaced by <code class="language-plaintext highlighter-rouge">#setOpenGLEmulation</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">LWJGL3Net#openURI</code> does now work on macOS &amp; JDK &gt;= 16; we also added a fallback to <code class="language-plaintext highlighter-rouge">xdg-open</code> on Linux if <code class="language-plaintext highlighter-rouge">Desktop.BROWSE</code> is unavailable</li>
  <li>Issues with LWJGL 3 and borderless fullscreen were resolved</li>
  <li>The <code class="language-plaintext highlighter-rouge">AL_DIRECT_CHANNELS_SOFT</code> option is now enabled by default for Sounds and AudioDevices as well; see <a href="https://github.com/libgdx/libgdx/pull/6527">#6527</a></li>
</ul>

<h3 id="lwjgl-3-angle-extension">LWJGL 3 ANGLE Extension</h3>
<p><a href="https://twitter.com/badlogicgames">Mario</a> also recently added a LWJGL3 <a href="https://github.com/google/angle">ANGLE</a> extension. It emulates OpenGL ES 2.0 through DirectX (Windows), desktop OpenGL (Linux), and Metal (macOS) and may become the preferred method of rendering on macOS if Apple removes OpenGL support entirely.</p>

<p>To use it, add the <code class="language-plaintext highlighter-rouge">gdx-lwjgl3-angle</code> extension to your <code class="language-plaintext highlighter-rouge">gdx-lwjgl3</code> desktop project. Then call <code class="language-plaintext highlighter-rouge">config.setOpenGLEmulation(GLEmulation.ANGLE_GLES20, 0, 0)</code> on your <code class="language-plaintext highlighter-rouge">Lwjgl3ApplicationConfiguration</code> instance before creating your <code class="language-plaintext highlighter-rouge">Lwjgl3Application</code>. Check out <a href="https://github.com/libgdx/libgdx/pull/6672">#6672</a> for more information.</p>

<p><strong>Pros:</strong></p>
<ul>
  <li>Better compatibility with systems that don’t support OpenGL 2 by using DirectX on Windows and Metal on macOS.</li>
  <li>May fix some OpenGL driver issues.</li>
</ul>

<p><strong>Cons:</strong></p>
<ul>
  <li>Does only support OpenGL ES 2.0, as the macOS ANGLE Metal backend <a href="https://github.com/google/angle#level-of-opengl-es-support-via-backing-renderers">only supports OpenGL ES 2.0</a> at this point in time.</li>
  <li>Currently contains non-working 32-bit Windows natives (see <a href="https://github.com/libgdx/libgdx/issues/6806">#6806</a>).</li>
  <li>Doesn’t support window transparency on macOS/Linux.</li>
  <li>And a few other <a href="https://github.com/libgdx/libgdx/issues?q=is%3Aissue+is%3Aopen+label%3Aangle">bugs</a>, that will need to be ironed out.</li>
</ul>

<h2 id="a-few-notable-changes">A few notable changes</h2>
<ul>
  <li>Updated to <a href="https://github.com/MobiVM/robovm/wiki/Changelog#2316-apr-2022">MobiVM 2.3.16</a> from 2.3.12. This adds iOS 15.4 bindings, native M1 support as well as other fixes and improvements, including Gradle 7 support.</li>
  <li>The GWT reflection cache was split into two generated classes, which doubles its size! (<a href="https://github.com/libgdx/libgdx/pull/6386">#6386</a>)</li>
  <li>An octree structure was added; see <a href="https://github.com/libgdx/libgdx/pull/6229">#6229</a></li>
  <li>Added <code class="language-plaintext highlighter-rouge">NWSEResize</code>, <code class="language-plaintext highlighter-rouge">NESWResize</code>, <code class="language-plaintext highlighter-rouge">AllResize</code>, <code class="language-plaintext highlighter-rouge">NotAllowed</code> and <code class="language-plaintext highlighter-rouge">None</code> system cursors; see <a href="https://github.com/libgdx/libgdx/pull/6756">#6756</a> &amp; <a href="https://github.com/libgdx/libgdx/pull/6822">#6822</a>; and <code class="language-plaintext highlighter-rouge">Graphics#setSystemCursor()</code> now works on Android as well</li>
  <li>GWT assets can now be hosted on a different URL than the Javascript files themselves (<a href="https://github.com/libgdx/libgdx/pull/6851">#6851</a>)</li>
</ul>

<h3 id="other-breaking-changes">Other breaking changes</h3>
<ul>
  <li>We increased the minimum supported iOS version to 9.0. Update your <code class="language-plaintext highlighter-rouge">Info.plist</code> file if necessary.</li>
  <li>On Android, we moved the natives loading out of static init block (see <a href="https://github.com/libgdx/libgdx/issues/5795">#5795</a>); this allows users to run code before the initialisation of the natives</li>
  <li>Shared libraries are now built on Ubuntu 18.04 (up from Ubuntu 16.04) to match the behaviour of LWJGL 3; this may make older Linux operating systems no longer compatible (see <a href="https://github.com/libgdx/libgdx/pull/6659">#6659</a>)</li>
  <li>The built-in font files <code class="language-plaintext highlighter-rouge">arial-15.fnt</code> and <code class="language-plaintext highlighter-rouge">arial-15.png</code> have been replaced with <code class="language-plaintext highlighter-rouge">lsans-15.fnt</code> and <code class="language-plaintext highlighter-rouge">lsans-15.png</code>. The new files should match the old ones very closely, but there is the possibility that it may change some text layout that uses the built-in font. Code that expects arial-15 assets to be present must change to lsans-15! (<a href="https://github.com/libgdx/libgdx/pull/6727">#6727</a>)</li>
  <li><code class="language-plaintext highlighter-rouge">AndroidApplicationConfiguration#hideStatusBar</code> was removed; see <a href="https://github.com/libgdx/libgdx/pull/6683">#6683</a></li>
</ul>

<h3 id="full-changelog">Full changelog</h3>
<p class="notice--info">Updating your Gradle project is straight-forward: Check out the instructions <a href="/wiki/articles/updating-libgdx">on the wiki</a>! The latest version of dependencies can, as always, be found <a href="/dev/versions/">here</a>.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- [BREAKING CHANGE] iOS: Increased min supported iOS version to 9.0. Update your Info.plist file if necessary.
- [BREAKING CHANGE] Android Moved natives loading out of static init block, see #5795
- [BREAKING CHANGE] Linux: Shared libraries are now built on Ubuntu 18.04 (up from Ubuntu 16.04)
- [BREAKING CHANGE] The built-in font files arial-15.fnt and arial-15.png have been replaced with lsans-15.fnt and lsans-15.png; this may change some text layout that uses the built-in font, and code that expects arial-15 assets to be present must change to lsans-15.
- [BREAKING CHANGE] Legacy LWJGL3 projects must update the sourceCompatibility to 1.8 or higher.
- [BREAKING CHANGE] Android Removed hideStatusBar configuration, see #6683
- [BREAKING CHANGE] Lwjgl3ApplicationConfiguration#useOpenGL3 was replaced by #setOpenGLEmulation
- [CONTRIBUTING] Removed Maven and Ant build systems. libGDX is now solely built with Gradle. See https://libgdx.com/dev/from-source/ for updated build instructions.
- [CONTRIBUTING] Gradle build now takes -PjavaVersion=7|8|9... to specify the Java version against which to compile libGDX. Default is Java 7 for everything, except the LWJGL3 backend, which is compiled for Java 8.
- LWJGL3 extension: Added gdx-lwjgl3-glfw-awt-macos extension. Fixes GLFW in such a way, that the LWJGL3/libGDX must no longer run on the main thread in macOS, which allows AWT to work in parallel, i.e. file dialogs, JFrames, ImageIO, etc. You no longer need to pass `-XstartOnFirstThread` when starting an LWJGL3 app on macOS. See `AwtTestLWJGL` in gdx-tests-lwjgl3. For more information, see https://github.com/libgdx/libgdx/pull/6772
- API Addition: Added LWJGL3 ANGLE support for x86_64 Windows, Linux, and macOS. Emulates OpenGL ES 2.0 through DirectX (Windows), desktop OpenGL (Linux), and Metal (macOS). May become the preferred method of rendering on macOS if Apple removes OpenGL support entirely. May fix some OpenGL driver issues. More information here: https://github.com/libgdx/libgdx/pull/6672
- iOS: Update to MobiVM 2.3.16
- Update to LWJGL 3.3.1; adds support for M1 Macs
- API Addition: ObjLoader now supports ambientColor, ambientTexture, transparencyTexture, specularTexture and shininessTexture
- API Addition: PointSpriteParticleBatch blending is now configurable.
- TOOLS Features: Blending mode and sort mode can be changed in Flame particle 3D editor.
- API Addition: Polygon methods setVertex, getVertex, getVertexCount, getCentroid.
- API Addition: TMX built-in tile property "type" is now supported.
- API Addition: Octree structure.
- API Addition: Added StringBuilder#toStringAndClear() method.
- FirstPersonCameraController keys mapping is now configurable
- Fix: GlyphLayout: Several fixes for color markup runs with multi-line or wrapping texts
- API change: GlyphLayout#GlyphRun is now one GlyphRun per line. "color" was removed from GlyphRun and is now handled by GlyphLayout.
- Gdx Setup Tool: Target Android API 30 and update AGP plugin to 4.1.3
- API Fix: Sound IDs are now properly removed; this prevents changes to music instances with the same ID
- API Fix: LWJGL3Net#openURI does now work on macOS &amp; JDK &gt;= 16
- API Fix: Fixed a possible deadlock with AssetManager#dispose() and #clear()
- API Change: Enable the AL_DIRECT_CHANNELS_SOFT option for Sounds and AudioDevices as well to fix stereo sound
- API Addition: CameraInputController#setInvertedControls(boolean)
- API Removal: AnimatedTiledMapTile#frameCount
- LWJGL 3 is now the default desktop backend. If you want to port your existing applications, take a look here: https://gist.github.com/crykn/eb37cb4f7a03d006b3a0ecad27292a2d
- Brought the official and third-party extensions in gdx-setup up to date. Removed some unmaintained ones and added gdx-websockets &amp; jbump.
- API Fix: Escaped characters in XML attributes are now properly un-escaped
- Bug Fix: AssetManager backslash conversion removed - fixes use of filenames containing backslashes
- gdx-setup now places the assets directory in project root instead of android or core. See advanced settings (UI) or arguments (command line) if you don't want it in root.
- API Fix: Resolved issues with LWJGL 3 and borderless fullscreen
- API Addition: GeometryUtils,polygons isCCW, ensureClockwise, reverseVertices
- API Addition: Added FreeTypeFontGenerator#hasCharGlyph method.
- API Fix: Pool discard method now resets object by default. This fixes the known issue about Pool in libGDX 1.10.0.
- API Addition: Split GWT reflection cache into two generated classes
- API Fix: Fix Box2D memory leak with ropes on GWT
- API Fix: Fix NPE in Type#getDeclaredAnnotation
- API Addition: Add pause/resume methods to AudioDevice
- API Fix: Protection against NullPointerException in World#destroyBody()
- API Fix: Prevent repeated mipmap generation in FileTextureArrayData
- API Fix: Fix issue with camera reference in CameraGroupStrategy’s default sorter
- API Fix: Move vertex array index buffer limit to backends to fix issue with numIndices parameter
- API Fix: TexturePacker: Fix wrong Y value when using padding
- API Fix: Lwjgl3Net: Add fallback to xdg-open on Linux if Desktop.BROWSE is unavailable
- API Addition: Add NWSEResize, NESWResize, AllResize, and NotAllowed and None SystemCursors
- API Addition: GWTApplication#getJavaHeap and getNativeHeap are now supported
- API Addition: Box2D Shape now implements Disposable
- API Addition: Added ChainShape#clear method
- API Addition: Adds Tooltip#setTouchIndependent; see #6758
- API Addition: Emulate Timer#isEmpty on GWT
- API Addition: Bits add copy constructor public Bits (Bits bitsToCpy)
- API Addition: Added List#drawSelection().
- API Addition: GwtApplicationConfiguration#xrCompatible
- API Fix: setSystemCursor() now works on Android
- API Fix: getDisplayMode() is now more accurate on Android and GWT.
- API Addition: JsonValue#iterator(String) to more easily iterate a child that may not exist.
- API Addition: Added ExtendViewport#setScaling, eg for use with Scaling.contain.
- API Addition: Added getBoundingRectangle() to Polyline
- API Addition: ShapeRenderer#check() has now protected visibility
- API Addition: Add ability to host GWT module on a different domain than the site, see #6851
- Various minor Scene2D improvements
</code></pre></div></div>]]></content><author><name></name></author><category term="news" /><category term="changelog" /><summary type="html"><![CDATA[We are proud to present a new major release of libGDX: version 1.11.0!]]></summary></entry></feed>